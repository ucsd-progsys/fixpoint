program:
let max x y = if x>y then x else y

max : x:int -> y:int -> { v : int | x =< v /\ y =< v }

constraints:
(1.1)  x:K_x; y:K_y;  (x>y) |- {v=x} <: K_1
(1.2)  x:K_x; y:K_y; !(x>y) |- {v=y} <: K_1
(1.3)  true |- {v=x} <: K_x
(1.4)  true |- {v=y} <: K_y

property: K_1 = { v:int | x=<v /\ y=<v }

constraint: env [x:{v : int | [K_x]}; 
                 y:{v : int | [K_y]}]
	    grd (x > y)
	    lhs {v : int | [v = x]}
	    rhs {v : int | [K_1]}

constraint: env [x:{v : int | [K_x]}; 
                 y:{v : int | [K_y]}]
	    grd [~(x > y)]
	    lhs {v : int | [v = x]}
	    rhs {v : int | [K_1]}

solution: k1 :=  [x <= v; y <= v]
