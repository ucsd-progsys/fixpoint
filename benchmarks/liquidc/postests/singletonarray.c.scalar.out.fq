constraint:
 env  [__cil_tmp1_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = 0)]} 
 rhs {VV_int : int | [k_0]} 
 id 1 tag [0;1;-1;0] //main 
 
 
wf: env [UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_0]} 
      
     
//solution: k_0 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(0 = VV_int);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= 0);(0 <= VV_int);(((VV_int - 0) mod 8) = 0);(VV_int = 0)] 

solution: k_0 := [((VV_int = 0), SCALAR16);((((VV_int - 0) mod 8) = 0), SCALAR1);((0 <= VV_int), GEZ);((VV_int >= 0), SCALAR7);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR13);((0 = VV_int), EQZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR25)] 

//QUALIFIERS 

qualif SCALAR9(VV_int:int):(((VV_int - 2) mod 8) = 0)
      
qualif SCALAR8(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR7(VV_int:int):(VV_int >= 0)
      
qualif SCALAR6(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 3)) mod 8) = 0)
      
qualif SCALAR5(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 2)) mod 8) = 0)
      
qualif SCALAR4(VV_int:int):(VV_int = 2)
      
qualif SCALAR3(VV_int:int):(VV_int >= 2)
      
qualif SCALAR26(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 2))
      
qualif SCALAR25(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0)
      
qualif SCALAR24(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 2))
      
qualif SCALAR23(VV_int:int):(VV_int >= 4)
      
qualif SCALAR22(VV_int:int):(((VV_int - 4) mod 8) = 0)
      
qualif SCALAR21(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 3))
      
qualif SCALAR20(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 3))
      
qualif SCALAR2(VV_int:int):(VV_int = 3)
      
qualif SCALAR19(VV_int:int):(((VV_int - 3) mod 8) = 0)
      
qualif SCALAR18(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 8))
      
qualif SCALAR17(VV_int:int):(VV_int = 8)
      
qualif SCALAR16(VV_int:int):(VV_int = 0)
      
qualif SCALAR15(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR14(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 8))
      
qualif SCALAR13(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR12(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR11(VV_int:int):(VV_int >= 8)
      
qualif SCALAR10(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0)
      
qualif SCALAR1(VV_int:int):(((VV_int - 0) mod 8) = 0)
      
qualif SCALAR0(VV_int:int):(VV_int >= 3)
      
qualif SCALAR(VV_int:int):(VV_int = 4)
      
qualif NEZ0(VV_int:int):(0 != VV_int) 
qualif NEZ(VV_int:int):(0 = 1)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GEZ(VV_int:int):(0 <= VV_int)
      
qualif EQZ(VV_int:int):(0 = VV_int) 
 
