constraint:
 env  [z_main:{VV_int : int | []};
       y_main:{VV_int : int | []};
       x_main:{VV_int : int | []};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | []};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | []};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]} 
 rhs {VV_int : int | [k_0]} 
 id 1 tag [1;1;-1;0] //main 
 
constraint:
 env  [z_main:{VV_int : int | []};
       y_main:{VV_int : int | []};
       x_main:{VV_int : int | []};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | []};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]} 
 rhs {VV_int : int | [k_1]} 
 id 2 tag [1;1;-2;0] //main 
 
constraint:
 env  [z_main:{VV_int : int | []};
       y_main:{VV_int : int | []};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | []};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_2]} 
 id 3 tag [1;1;-3;0] //main 
 
constraint:
 env  [z_main:{VV_int : int | []};
       y_main:{VV_int : int | []};
       x_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | []};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [&& [(VV_int = (x_main__SSA__blk_0_1 + 40)) ; (x_main__SSA__blk_0_1 <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([x_main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_3]} 
 id 4 tag [1;1;-4;0] //main 
 
constraint:
 env  [z_main:{VV_int : int | []};
       y_main:{VV_int : int | []};
       x_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | [&& [(VV_int = (x_main__SSA__blk_0_1 + 40)) ; (x_main__SSA__blk_0_1 <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([x_main__SSA__blk_0_1]))]};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (4 : int))]} 
 rhs {VV_int : int | [k_4]} 
 id 5 tag [1;1;-6;0] //main 
 
constraint:
 env  [z_main:{VV_int : int | []};
       y_main:{VV_int : int | []};
       x_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | [&& [(VV_int = (x_main__SSA__blk_0_1 + 40)) ; (x_main__SSA__blk_0_1 <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([x_main__SSA__blk_0_1]))]};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | [(VV_int = (4 : int))]};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]} 
 rhs {VV_int : int | [k_5]} 
 id 6 tag [1;1;-7;0] //main 
 
constraint:
 env  [z_main:{VV_int : int | []};
       y_main:{VV_int : int | []};
       x_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | [&& [(VV_int = (x_main__SSA__blk_0_1 + 40)) ; (x_main__SSA__blk_0_1 <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([x_main__SSA__blk_0_1]))]};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | [(VV_int = (4 : int))]};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = tmp___0_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp___0_main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_6]} 
 id 7 tag [1;1;-8;0] //main 
 
constraint:
 env  [z_main:{VV_int : int | []};
       y_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp___0_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp___0_main__SSA__blk_0_1]))]};
       y_main:{VV_int : int | []};
       x_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | [&& [(VV_int = (x_main__SSA__blk_0_1 + 40)) ; (x_main__SSA__blk_0_1 <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([x_main__SSA__blk_0_1]))]};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | [(VV_int = (4 : int))]};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = y_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([y_main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_7]} 
 id 8 tag [1;1;-9;0] //main 
 
constraint:
 env  [z_main__SSA__blk_0_1:{VV_int : int | [(VV_int = y_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([y_main__SSA__blk_0_1]))]};
       z_main:{VV_int : int | []};
       y_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp___0_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp___0_main__SSA__blk_0_1]))]};
       y_main:{VV_int : int | []};
       x_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | [&& [(VV_int = (x_main__SSA__blk_0_1 + 40)) ; (x_main__SSA__blk_0_1 <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([x_main__SSA__blk_0_1]))]};
       __cil_tmp9_main:{VV_int : int | []};
       __cil_tmp8_main:{VV_int : int | [(VV_int = (4 : int))]};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = z_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([z_main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_8]} 
 id 9 tag [1;1;-10;0] //main 
 
constraint:
 env  [z_main__SSA__blk_0_1:{VV_int : int | [(VV_int = y_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([y_main__SSA__blk_0_1]))]};
       z_main:{VV_int : int | []};
       y_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp___0_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp___0_main__SSA__blk_0_1]))]};
       y_main:{VV_int : int | []};
       x_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       x_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp___0_main:{VV_int : int | []};
       mem_6_main:{VV_int : int | [&& [(VV_int = (x_main__SSA__blk_0_1 + 40)) ; (x_main__SSA__blk_0_1 <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([x_main__SSA__blk_0_1]))]};
       __cil_tmp9_main:{VV_int : int | [(VV_int = z_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([z_main__SSA__blk_0_1]))]};
       __cil_tmp8_main:{VV_int : int | [(VV_int = (4 : int))]};
       __cil_tmp7_main:{VV_int : int | [&& [(VV_int = (10 : int)) ; (0 <= VV_int)]]};
       __cil_tmp10_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [&& [(VV_int = (__cil_tmp9_main + 4)) ; (__cil_tmp9_main <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([__cil_tmp9_main]))]} 
 rhs {VV_int : int | [k_9]} 
 id 10 tag [1;1;-11;0] //main 
 
 
wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_9]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_8]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_7]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_6]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_5]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_4]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_3]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_2]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_1]} 
      
    

    wf: env [z_main:{VV_int : int | []};
             y_main:{VV_int : int | []};
             x_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_0]} 
      
     
//solution: k_9 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_8 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_7 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_6 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_5 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_4 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_3 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_2 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_1 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

//solution: k_0 := [(VV_int = 4);(((VV_int - 0) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(((VV_int - 1) mod 8) = 0);(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= 8);(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 8));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(VV_int = 8);(VV_int >= (BLOCK_BEGIN([VV_int]) + 8));(0 != VV_int);(((VV_int - 4) mod 8) = 0);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)] 

solution: k_9 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_8 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_7 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_6 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_5 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_4 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_3 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_2 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_1 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_0 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0), SCALAR24);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR23);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR22);((VV_int >= 4), SCALAR21);((((VV_int - 4) mod 8) = 0), SCALAR20);((0 != VV_int), NEZ0);((VV_int >= (BLOCK_BEGIN([VV_int]) + 8)), SCALAR19);((VV_int = 8), SCALAR18);((0 = VV_int), EQZ);((VV_int = 0), SCALAR17);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR16);((VV_int = (BLOCK_BEGIN([VV_int]) + 8)), SCALAR15);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR14);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((VV_int >= 8), SCALAR12);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR11);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int >= 0), SCALAR9);((VV_int = 1), SCALAR8);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR7);((VV_int >= 1), SCALAR6);((((VV_int - 1) mod 8) = 0), SCALAR5);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR4);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((((VV_int - 0) mod 4) = 0), SCALAR2);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR1);((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

//QUALIFIERS 

qualif SCALAR9(VV_int:int):(VV_int >= 0)
      
qualif SCALAR8(VV_int:int):(VV_int = 1)
      
qualif SCALAR7(VV_int:int):(((VV_int - 1) mod 4) = 0)
      
qualif SCALAR6(VV_int:int):(VV_int >= 1)
      
qualif SCALAR5(VV_int:int):(((VV_int - 1) mod 8) = 0)
      
qualif SCALAR4(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 1))
      
qualif SCALAR3(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 1))
      
qualif SCALAR24(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)
      
qualif SCALAR23(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)
      
qualif SCALAR22(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0)
      
qualif SCALAR21(VV_int:int):(VV_int >= 4)
      
qualif SCALAR20(VV_int:int):(((VV_int - 4) mod 8) = 0)
      
qualif SCALAR2(VV_int:int):(((VV_int - 0) mod 4) = 0)
      
qualif SCALAR19(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 8))
      
qualif SCALAR18(VV_int:int):(VV_int = 8)
      
qualif SCALAR17(VV_int:int):(VV_int = 0)
      
qualif SCALAR16(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR15(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 8))
      
qualif SCALAR14(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR13(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR12(VV_int:int):(VV_int >= 8)
      
qualif SCALAR11(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0)
      
qualif SCALAR10(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR1(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0)
      
qualif SCALAR0(VV_int:int):(((VV_int - 0) mod 8) = 0)
      
qualif SCALAR(VV_int:int):(VV_int = 4)
      
qualif NEZ0(VV_int:int):(0 != VV_int) 
qualif NEZ(VV_int:int):(0 = 1)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GEZ(VV_int:int):(0 <= VV_int)
      
qualif EQZ(VV_int:int):(0 = VV_int) 
 
