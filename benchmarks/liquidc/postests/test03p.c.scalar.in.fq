constraint:
 env  [tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       r_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [|| [&& [(4 >= 0) ; (VV_int = 4)];&& [(4 < 0) ; (VV_int > 0)]]]} 
 rhs {VV_int : int | [k_4]} 
 id 1 tag [4;10;-1;0] //main 
 
constraint:
 env  [tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       r_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | [|| [&& [(4 >= 0) ; (VV_int = 4)];&& [(4 < 0) ; (VV_int > 0)]]]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]} 
 rhs {VV_int : int | [k_5]} 
 id 2 tag [4;10;-2;0] //main 
 
constraint:
 env  [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       r_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | [|| [&& [(4 >= 0) ; (VV_int = 4)];&& [(4 < 0) ; (VV_int > 0)]]]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_6]} 
 id 3 tag [4;10;-3;0] //main 
 
constraint:
 env  [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main__SSA__phi_3:{VV_int : int | [k_3]};
       tmp___0_main:{VV_int : int | []};
       r_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       r_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | [|| [&& [(4 >= 0) ; (VV_int = 4)];&& [(4 < 0) ; (VV_int > 0)]]]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [true]} 
 rhs {VV_int : int | [k_7]} 
 id 4 tag [4;6;-1;0] //main 
 
constraint:
 env  [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main__SSA__phi_3:{VV_int : int | [k_3]};
       tmp___0_main__SSA__blk_4_1:{VV_int : int | [true]};
       tmp___0_main:{VV_int : int | []};
       r_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       r_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | [|| [&& [(4 >= 0) ; (VV_int = 4)];&& [(4 < 0) ; (VV_int > 0)]]]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd (tmp___0_main__SSA__blk_4_1 != 0) 
 lhs {VV_int : int | []} 
 rhs {VV_int : int | [k_8]} 
 id 5 tag [4;4;-1;0] //main 
 
constraint:
 env  [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main:{VV_int : int | []};
       r_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       r_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | [|| [&& [(4 >= 0) ; (VV_int = 4)];&& [(4 < 0) ; (VV_int > 0)]]]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | []} 
 rhs {VV_int : int | [k_3[tmp___0_main__SSA__phi_3:=tmp___0_main]]} 
 id 6 tag [4;8;0;0] //main 
 
constraint:
 env  [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       tmp___0_main__SSA__phi_3:{VV_int : int | []};
       tmp___0_main__SSA__blk_4_1:{VV_int : int | [true]};
       tmp___0_main:{VV_int : int | []};
       r_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
       r_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | [|| [&& [(4 >= 0) ; (VV_int = 4)];&& [(4 < 0) ; (VV_int > 0)]]]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd (tmp___0_main__SSA__blk_4_1 != 0) 
 lhs {VV_int : int | [(VV_int = tmp___0_main__SSA__blk_4_1)]} 
 rhs {VV_int : int | [k_3[tmp___0_main__SSA__phi_3:=tmp___0_main__SSA__blk_4_1]]} 
 id 7 tag [4;4;0;0] //main 
 
constraint:
 env  [y_foo:{VV_int : int | []};
       x_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       __cil_tmp4_foo:{VV_int : int | []};
       __cil_tmp3_foo:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | []} 
 rhs {VV_int : int | [k_0]} 
 id 8 tag [1;1;-1;1] //foo 
 
constraint:
 env  [y_foo__SSA__blk_0_1:{VV_int : int | []};
       y_foo:{VV_int : int | []};
       x_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       __cil_tmp4_foo:{VV_int : int | []};
       __cil_tmp3_foo:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = ((y_foo__SSA__blk_0_1 >= 0) ? 1 : 0))]} 
 rhs {VV_int : int | [k_1]} 
 id 9 tag [1;1;-2;1] //foo 
 
constraint:
 env  [y_foo__SSA__blk_0_1:{VV_int : int | []};
       y_foo:{VV_int : int | []};
       x_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       __cil_tmp4_foo:{VV_int : int | []};
       __cil_tmp3_foo:{VV_int : int | [(VV_int = ((y_foo__SSA__blk_0_1 >= 0) ? 1 : 0))]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (__cil_tmp3_foo : int))]} 
 rhs {VV_int : int | [k_2]} 
 id 10 tag [1;1;-3;1] //foo 
 
 
wf: env [y_foo:{VV_int : int | []};
             x_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_2]} 
      
    

    wf: env [y_foo:{VV_int : int | []};
             x_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_1]} 
      
    

    wf: env [y_foo:{VV_int : int | []};
             x_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_0]} 
      
    

    wf: env [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
             tmp_main:{VV_int : int | []};
             tmp___0_main__SSA__phi_3:{VV_int : int | [k_3]};
             tmp___0_main__SSA__blk_4_1:{VV_int : int | [true]};
             tmp___0_main:{VV_int : int | []};
             r_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
             r_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_8]} 
      
    

    wf: env [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
             tmp_main:{VV_int : int | []};
             tmp___0_main__SSA__phi_3:{VV_int : int | [k_3]};
             tmp___0_main:{VV_int : int | []};
             r_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
             r_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_7]} 
      
    

    wf: env [tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
             tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             r_main__SSA__blk_0_1:{VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]};
             r_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_3]} 
      
    

    wf: env [tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             r_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_6]} 
      
    

    wf: env [tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             r_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_5]} 
      
    

    wf: env [tmp_main:{VV_int : int | []};
             tmp___0_main:{VV_int : int | []};
             r_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_4]} 
      
     
//solution: k_8 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_7 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_6 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_5 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_4 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_3 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_2 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_1 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

//solution: k_0 := [(VV_int = 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0);(0 = 1);(((VV_int - 0) mod 4) = 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= (BLOCK_BEGIN([VV_int]) + 1));(VV_int >= 1);(((VV_int - 1) mod 4) = 0);(0 <= VV_int);(0 < VV_int);(VV_int = 1);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int = 0);(0 = VV_int);(0 != VV_int);(VV_int >= 4);(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)] 

solution: k_8 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_7 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_6 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_5 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_4 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_3 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_2 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_1 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

solution: k_0 := [((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR14);((VV_int >= 4), SCALAR13);((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR12);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR10);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR9);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR8);((VV_int >= 0), SCALAR7);((VV_int = 1), SCALAR6);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((((VV_int - 1) mod 4) = 0), SCALAR5);((VV_int >= 1), SCALAR4);((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR3);((VV_int = (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - 0) mod 4) = 0), SCALAR1);((0 = 1), NEZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0), SCALAR0);((VV_int = 4), SCALAR)] 

//QUALIFIERS 

qualif SCALAR9(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR8(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR7(VV_int:int):(VV_int >= 0)
      
qualif SCALAR6(VV_int:int):(VV_int = 1)
      
qualif SCALAR5(VV_int:int):(((VV_int - 1) mod 4) = 0)
      
qualif SCALAR4(VV_int:int):(VV_int >= 1)
      
qualif SCALAR3(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 1))
      
qualif SCALAR2(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 1))
      
qualif SCALAR14(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)
      
qualif SCALAR13(VV_int:int):(VV_int >= 4)
      
qualif SCALAR12(VV_int:int):(VV_int = 0)
      
qualif SCALAR11(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR10(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR1(VV_int:int):(((VV_int - 0) mod 4) = 0)
      
qualif SCALAR0(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 4) = 0)
      
qualif SCALAR(VV_int:int):(VV_int = 4)
      
qualif NEZ0(VV_int:int):(0 != VV_int) 
qualif NEZ(VV_int:int):(0 = 1)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GEZ(VV_int:int):(0 <= VV_int)
      
qualif EQZ(VV_int:int):(0 = VV_int) 
 
