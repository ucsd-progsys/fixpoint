del_dep: [2;2;-2;0] => * 
del_dep: [2;1;-9;0] => * 
constraint:
 env  [tb__lcc_heapify___main:{VV_ptr_A13 : ptr(A13) | []};
       __cil_tmp9_main:{VV_ptr_A11 : ptr(A11) | []};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_ptr_A11 : ptr(A11) | []};
       __cil_tmp4_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_ptr_A12 : ptr(A12) | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = 4)]} 
 rhs {VV_int : int | [(VV_int >= 0)]} 
 id 1 tag [2;2;-1;0] //main 
 
constraint:
 env  [tb__lcc_heapify___main__SSA__blk_0_1:{VV_ptr_A9 : ptr(A9) | [&& [(VV_ptr_A9 > 0) ; (VV_ptr_A9 = BLOCK_BEGIN([VV_ptr_A9])) ; (BLOCK_END([VV_ptr_A9]) = (VV_ptr_A9 + 4))]]};
       tb__lcc_heapify___main:{VV_ptr_A13 : ptr(A13) | []};
       lqn#0:{VV_ptr_A11 : ptr(A11) | [(VV_ptr_A11 = 0)]};
       __cil_tmp9_main:{VV_ptr_A11 : ptr(A11) | []};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_ptr_A11 : ptr(A11) | []};
       __cil_tmp4_main:{VV_int : int | [(VV_int = (__cil_tmp3_main : int))]};
       __cil_tmp3_main:{VV_ptr_A12 : ptr(A12) | [(VV_ptr_A12 = 0)]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_ptr_A9 : ptr(A9) | [(VV_ptr_A9 = tb__lcc_heapify___main__SSA__blk_0_1)]} 
 rhs {VV_ptr_A9 : ptr(A9) | [|| [(UNCHECKED([VV_ptr_A9]) = 1);&& [(VV_ptr_A9 != 0) ; (BLOCK_BEGIN([VV_ptr_A9]) <= VV_ptr_A9) ; ((VV_ptr_A9 + 3) < BLOCK_END([VV_ptr_A9]))]]]} 
 id 2 tag [2;1;-3;0] //main 
 
constraint:
 env  [tb__lcc_heapify___main__SSA__blk_0_1:{VV_ptr_A9 : ptr(A9) | [&& [(VV_ptr_A9 > 0) ; (VV_ptr_A9 = BLOCK_BEGIN([VV_ptr_A9])) ; (BLOCK_END([VV_ptr_A9]) = (VV_ptr_A9 + 4))]]};
       tb__lcc_heapify___main:{VV_ptr_A13 : ptr(A13) | []};
       lqn#0:{VV_ptr_A11 : ptr(A11) | [(VV_ptr_A11 = 0)]};
       __cil_tmp9_main:{VV_ptr_A11 : ptr(A11) | [(VV_ptr_A11 = lqn#0)]};
       __cil_tmp8_main:{VV_int : int | [(VV_int = (__cil_tmp7_main : int))]};
       __cil_tmp7_main:{VV_int : int | [(VV_int = ((__cil_tmp6_main = __cil_tmp4_main) ? 1 : 0))]};
       __cil_tmp6_main:{VV_int : int | [(VV_int = (__cil_tmp5_main : int))]};
       __cil_tmp5_main:{VV_ptr_A11 : ptr(A11) | [(VV_ptr_A11 = __cil_tmp9_main);(BLOCK_BEGIN([VV_ptr_A11]) = BLOCK_BEGIN([__cil_tmp9_main]));(BLOCK_END([VV_ptr_A11]) = BLOCK_END([__cil_tmp9_main]));(UNCHECKED([VV_ptr_A11]) = UNCHECKED([__cil_tmp9_main]))]};
       __cil_tmp4_main:{VV_int : int | [(VV_int = (__cil_tmp3_main : int))]};
       __cil_tmp3_main:{VV_ptr_A12 : ptr(A12) | [(VV_ptr_A12 = 0)]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = __cil_tmp8_main)]} 
 rhs {VV_int : int | [(VV_int != 0)]} 
 id 3 tag [2;1;-8;0] //main 
 
 
 
//solution: k_9 := [((VV_ptr_A11 != 0) => && [(0 < VV_ptr_A11) ; (BLOCK_BEGIN([VV_ptr_A11]) <= VV_ptr_A11) ; (VV_ptr_A11 < BLOCK_END([VV_ptr_A11]))]);(BLOCK_END([VV_ptr_A11]) = BLOCK_END([A9#Ix#0]));((VV_ptr_A11 != 0) => ((BLOCK_END([VV_ptr_A11]) - VV_ptr_A11) >= 4));(VV_ptr_A11 < BLOCK_END([VV_ptr_A11]));(0 < VV_ptr_A11);(BLOCK_BEGIN([VV_ptr_A11]) = BLOCK_BEGIN([A9#Ix#0]));((VV_ptr_A11 != 0) => (VV_ptr_A11 = BLOCK_BEGIN([VV_ptr_A11])));(0 <= VV_ptr_A11);(VV_ptr_A11 = 0);(VV_ptr_A11 = BLOCK_BEGIN([VV_ptr_A11]));(BLOCK_BEGIN([VV_ptr_A11]) <= VV_ptr_A11);(UNCHECKED([VV_ptr_A11]) = 1)] 

//solution: k_8 := [(0 <= VV_int);(1 = 0);(0 < VV_int);(VV_int = 0)] 

solution: k_9 := [((UNCHECKED([VV_ptr_A11]) = 1), UCH[VV_ptr_0:=VV_ptr_A11]);((BLOCK_BEGIN([VV_ptr_A11]) <= VV_ptr_A11), LB[VV_ptr_0:=VV_ptr_A11]);((VV_ptr_A11 = BLOCK_BEGIN([VV_ptr_A11])), ISBS[VV_ptr_0:=VV_ptr_A11]);((VV_ptr_A11 = 0), EQZ0[VV_ptr_0:=VV_ptr_A11]);((0 <= VV_ptr_A11), GTZP0[VV_ptr_0:=VV_ptr_A11]);(((VV_ptr_A11 != 0) => (VV_ptr_A11 = BLOCK_BEGIN([VV_ptr_A11]))), NULLorBEGIN[VV_ptr_0:=VV_ptr_A11]);((BLOCK_BEGIN([VV_ptr_A11]) = BLOCK_BEGIN([A9#Ix#0])), BEGIN[~A0:=A9#Ix#0][VV_ptr_0:=VV_ptr_A11]);((0 < VV_ptr_A11), GTZP[VV_ptr_0:=VV_ptr_A11]);((VV_ptr_A11 < BLOCK_END([VV_ptr_A11])), UB[VV_ptr_0:=VV_ptr_A11]);(((VV_ptr_A11 != 0) => ((BLOCK_END([VV_ptr_A11]) - VV_ptr_A11) >= 4)), WORDSIZE[VV_ptr_0:=VV_ptr_A11]);((BLOCK_END([VV_ptr_A11]) = BLOCK_END([A9#Ix#0])), END[~A0:=A9#Ix#0][VV_ptr_0:=VV_ptr_A11]);(((VV_ptr_A11 != 0) => && [(0 < VV_ptr_A11) ; (BLOCK_BEGIN([VV_ptr_A11]) <= VV_ptr_A11) ; (VV_ptr_A11 < BLOCK_END([VV_ptr_A11]))]), NULLorVALID[VV_ptr_0:=VV_ptr_A11])] 

solution: k_8 := [((VV_int = 0), EQZ);((0 < VV_int), GTZ);((1 = 0), FALSE);((0 <= VV_int), GEZ)] 

//QUALIFIERS 

qualif WORDSIZE(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => ((BLOCK_END([VV_ptr_0]) - VV_ptr_0) >= 4))
      
qualif UCH(VV_ptr_0:ptr(0)):(UNCHECKED([VV_ptr_0]) = 1)
      
qualif UB(VV_ptr_0:ptr(0)):(VV_ptr_0 < BLOCK_END([VV_ptr_0]))
      
qualif NULLorVALID(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => && [(0 < VV_ptr_0) ; (BLOCK_BEGIN([VV_ptr_0]) <= VV_ptr_0) ; (VV_ptr_0 < BLOCK_END([VV_ptr_0]))])
      
qualif NULLorBEGIN(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => (VV_ptr_0 = BLOCK_BEGIN([VV_ptr_0])))
      
qualif LB(VV_ptr_0:ptr(0)):(BLOCK_BEGIN([VV_ptr_0]) <= VV_ptr_0)
      
qualif ISBS(VV_ptr_0:ptr(0)):(VV_ptr_0 = BLOCK_BEGIN([VV_ptr_0]))
      
qualif GTZP0(VV_ptr_0:ptr(0)):(0 <= VV_ptr_0)
      
qualif GTZP(VV_ptr_0:ptr(0)):(0 < VV_ptr_0)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GEZ(VV_int:int):(0 <= VV_int) 
qualif FALSE(VV_int:int):(1 = 0)
      
qualif EQZ0(VV_ptr_0:ptr(0)):(VV_ptr_0 = 0)
      
qualif EQZ(VV_int:int):(VV_int = 0)
      
qualif END(VV_ptr_0:ptr(0)):(BLOCK_END([VV_ptr_0]) = BLOCK_END([~A0]))
      
qualif BEGIN(VV_ptr_0:ptr(0)):(BLOCK_BEGIN([VV_ptr_0]) = BLOCK_BEGIN([~A0]))
      
 
