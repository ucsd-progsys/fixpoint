del_dep: [1;5;-2;1] => * 
 
 
//solution: k_9 := [(0 <= VV_int);(1 = 0);(0 < VV_int);(VV_int = 0)] 

//solution: k_8 := [((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]);((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4));(VV_ptr_A2 < BLOCK_END([VV_ptr_A2]));(0 < VV_ptr_A2);((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])));(0 <= VV_ptr_A2);(VV_ptr_A2 = 0);(VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]));(BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2);(UNCHECKED([VV_ptr_A2]) = 1)] 

//solution: k_15 := [((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]);(BLOCK_END([VV_ptr_A2]) = BLOCK_END([y_foo]));(BLOCK_END([VV_ptr_A2]) = BLOCK_END([x]));((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4));(VV_ptr_A2 < BLOCK_END([VV_ptr_A2]));(0 < VV_ptr_A2);(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([y_foo]));(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([x]));((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])));(0 <= VV_ptr_A2);(VV_ptr_A2 = 0);(VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]));(BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2);(UNCHECKED([VV_ptr_A2]) = 1)] 

//solution: k_14 := [(0 <= VV_int);(1 = 0);(0 < VV_int);(VV_int = 0)] 

//solution: k_13 := [((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]);(BLOCK_END([VV_ptr_A2]) = BLOCK_END([y_foo]));(BLOCK_END([VV_ptr_A2]) = BLOCK_END([x]));(BLOCK_END([VV_ptr_A2]) = BLOCK_END([tmp___0_foo__SSA__phi_4]));((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4));((VV_ptr_A2 + (4 * tmp___1_foo__SSA__blk_0_1)) <= BLOCK_END([VV_ptr_A2]));((VV_ptr_A2 + (4 * tmp___1_foo)) <= BLOCK_END([VV_ptr_A2]));(VV_ptr_A2 < BLOCK_END([VV_ptr_A2]));(0 < VV_ptr_A2);(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([y_foo]));(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([x]));(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([tmp___0_foo__SSA__phi_4]));((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])));(0 <= VV_ptr_A2);(VV_ptr_A2 = 0);(VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]));(BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2);(UNCHECKED([VV_ptr_A2]) = 1);(BLOCK_END([VV_ptr_A2]) >= (BLOCK_BEGIN([VV_ptr_A2]) + tmp___1_foo__SSA__blk_0_1));(BLOCK_END([VV_ptr_A2]) >= (BLOCK_BEGIN([VV_ptr_A2]) + tmp___1_foo))] 

//solution: k_12 := [(0 <= VV_int);(1 = 0);(VV_int < A2#Ix#0);(0 < VV_int);(VV_int <= A2#Ix#0);(VV_int = 0);(VV_int > A2#Ix#0);(VV_int >= A2#Ix#0)] 

//solution: k_11 := [((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]);(BLOCK_END([VV_ptr_A2]) = BLOCK_END([y_foo]));(BLOCK_END([VV_ptr_A2]) = BLOCK_END([x]));((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4));(VV_ptr_A2 < BLOCK_END([VV_ptr_A2]));(0 < VV_ptr_A2);(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([y_foo]));(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([x]));((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])));(0 <= VV_ptr_A2);(VV_ptr_A2 = 0);(VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]));(BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2);(UNCHECKED([VV_ptr_A2]) = 1)] 

//solution: k_10 := [(0 <= VV_int);(1 = 0);(0 < VV_int);(VV_int = 0)] 

solution: k_9 := [((VV_int = 0), EQZ);((0 < VV_int), GTZ);((1 = 0), FALSE);((0 <= VV_int), GEZ)] 

solution: k_8 := [((UNCHECKED([VV_ptr_A2]) = 1), UCH[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2), LB[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])), ISBS[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = 0), EQZ0[VV_ptr_0:=VV_ptr_A2]);((0 <= VV_ptr_A2), GTZP0[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]))), NULLorBEGIN[VV_ptr_0:=VV_ptr_A2]);((0 < VV_ptr_A2), GTZP[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 < BLOCK_END([VV_ptr_A2])), UB[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4)), WORDSIZE[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]), NULLorVALID[VV_ptr_0:=VV_ptr_A2])] 

solution: k_15 := [((UNCHECKED([VV_ptr_A2]) = 1), UCH[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2), LB[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])), ISBS[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = 0), EQZ0[VV_ptr_0:=VV_ptr_A2]);((0 <= VV_ptr_A2), GTZP0[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]))), NULLorBEGIN[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([x])), BEGIN[~A0:=x][VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([y_foo])), BEGIN[~A0:=y_foo][VV_ptr_0:=VV_ptr_A2]);((0 < VV_ptr_A2), GTZP[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 < BLOCK_END([VV_ptr_A2])), UB[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4)), WORDSIZE[VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = BLOCK_END([x])), END[~A0:=x][VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = BLOCK_END([y_foo])), END[~A0:=y_foo][VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]), NULLorVALID[VV_ptr_0:=VV_ptr_A2])] 

solution: k_14 := [((VV_int = 0), EQZ);((0 < VV_int), GTZ);((1 = 0), FALSE);((0 <= VV_int), GEZ)] 

solution: k_13 := [((BLOCK_END([VV_ptr_A2]) >= (BLOCK_BEGIN([VV_ptr_A2]) + tmp___1_foo)), SIZE0[~A0:=tmp___1_foo][VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) >= (BLOCK_BEGIN([VV_ptr_A2]) + tmp___1_foo__SSA__blk_0_1)), SIZE0[~A0:=tmp___1_foo__SSA__blk_0_1][VV_ptr_0:=VV_ptr_A2]);((UNCHECKED([VV_ptr_A2]) = 1), UCH[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2), LB[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])), ISBS[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = 0), EQZ0[VV_ptr_0:=VV_ptr_A2]);((0 <= VV_ptr_A2), GTZP0[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]))), NULLorBEGIN[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([tmp___0_foo__SSA__phi_4])), BEGIN[~A0:=tmp___0_foo__SSA__phi_4][VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([x])), BEGIN[~A0:=x][VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([y_foo])), BEGIN[~A0:=y_foo][VV_ptr_0:=VV_ptr_A2]);((0 < VV_ptr_A2), GTZP[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 < BLOCK_END([VV_ptr_A2])), UB[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 + (4 * tmp___1_foo)) <= BLOCK_END([VV_ptr_A2])), SIZE[~A0:=tmp___1_foo][VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 + (4 * tmp___1_foo__SSA__blk_0_1)) <= BLOCK_END([VV_ptr_A2])), SIZE[~A0:=tmp___1_foo__SSA__blk_0_1][VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4)), WORDSIZE[VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = BLOCK_END([tmp___0_foo__SSA__phi_4])), END[~A0:=tmp___0_foo__SSA__phi_4][VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = BLOCK_END([x])), END[~A0:=x][VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = BLOCK_END([y_foo])), END[~A0:=y_foo][VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]), NULLorVALID[VV_ptr_0:=VV_ptr_A2])] 

solution: k_12 := [((VV_int >= A2#Ix#0), GEQ[~A0:=A2#Ix#0]);((VV_int > A2#Ix#0), GT[~A0:=A2#Ix#0]);((VV_int = 0), EQZ);((VV_int <= A2#Ix#0), LEQ[~A0:=A2#Ix#0]);((0 < VV_int), GTZ);((VV_int < A2#Ix#0), LT[~A0:=A2#Ix#0]);((1 = 0), FALSE);((0 <= VV_int), GEZ)] 

solution: k_11 := [((UNCHECKED([VV_ptr_A2]) = 1), UCH[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2), LB[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])), ISBS[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = 0), EQZ0[VV_ptr_0:=VV_ptr_A2]);((0 <= VV_ptr_A2), GTZP0[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]))), NULLorBEGIN[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([x])), BEGIN[~A0:=x][VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([y_foo])), BEGIN[~A0:=y_foo][VV_ptr_0:=VV_ptr_A2]);((0 < VV_ptr_A2), GTZP[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 < BLOCK_END([VV_ptr_A2])), UB[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4)), WORDSIZE[VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = BLOCK_END([x])), END[~A0:=x][VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = BLOCK_END([y_foo])), END[~A0:=y_foo][VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]), NULLorVALID[VV_ptr_0:=VV_ptr_A2])] 

solution: k_10 := [((VV_int = 0), EQZ);((0 < VV_int), GTZ);((1 = 0), FALSE);((0 <= VV_int), GEZ)] 

//QUALIFIERS 

qualif WORDSIZE(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => ((BLOCK_END([VV_ptr_0]) - VV_ptr_0) >= 4))
                              
qualif UCH(VV_ptr_0:ptr(0)):(UNCHECKED([VV_ptr_0]) = 1)
                              
qualif UB(VV_ptr_0:ptr(0)):(VV_ptr_0 < BLOCK_END([VV_ptr_0]))
                              
qualif SIZE0(VV_ptr_0:ptr(0)):(BLOCK_END([VV_ptr_0]) >= (BLOCK_BEGIN([VV_ptr_0]) + ~A0))
                              
qualif SIZE(VV_ptr_0:ptr(0)):((VV_ptr_0 + (4 * ~A0)) <= BLOCK_END([VV_ptr_0]))
                              
qualif NULLorVALID(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => && [(0 < VV_ptr_0) ; (BLOCK_BEGIN([VV_ptr_0]) <= VV_ptr_0) ; (VV_ptr_0 < BLOCK_END([VV_ptr_0]))])
                              
qualif NULLorBEGIN(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => (VV_ptr_0 = BLOCK_BEGIN([VV_ptr_0])))
                              
qualif LT(VV_int:int):(VV_int < ~A0)
                              
qualif LEQ(VV_int:int):(VV_int <= ~A0)
                              
qualif LB(VV_ptr_0:ptr(0)):(BLOCK_BEGIN([VV_ptr_0]) <= VV_ptr_0)
                              
qualif ISBS(VV_ptr_0:ptr(0)):(VV_ptr_0 = BLOCK_BEGIN([VV_ptr_0]))
                              
qualif GTZP0(VV_ptr_0:ptr(0)):(0 <= VV_ptr_0)
                              
qualif GTZP(VV_ptr_0:ptr(0)):(0 < VV_ptr_0)
                              
qualif GTZ(VV_int:int):(0 < VV_int)
                              
qualif GT(VV_int:int):(VV_int > ~A0)
                              
qualif GEZ(VV_int:int):(0 <= VV_int)
                              
qualif GEQ(VV_int:int):(VV_int >= ~A0)
                              
qualif FALSE(VV_int:int):(1 = 0)
                              
qualif EQZ0(VV_ptr_0:ptr(0)):(VV_ptr_0 = 0)
                              
qualif EQZ(VV_int:int):(VV_int = 0)
                              
qualif END(VV_ptr_0:ptr(0)):(BLOCK_END([VV_ptr_0]) = BLOCK_END([~A0]))
                              
qualif BEGIN(VV_ptr_0:ptr(0)):(BLOCK_BEGIN([VV_ptr_0]) = BLOCK_BEGIN([~A0]))
                              
 
