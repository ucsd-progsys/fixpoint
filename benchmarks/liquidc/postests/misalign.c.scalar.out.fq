constraint:
 env  [y_main:{VV_int : int | []};
       tmp_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (8 : int))]} 
 rhs {VV_int : int | [k_2]} 
 id 1 tag [2;1;-1;0] //main 
 
constraint:
 env  [y_main:{VV_int : int | []};
       tmp_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_int : int | [(VV_int = (8 : int))]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]} 
 rhs {VV_int : int | [k_3]} 
 id 2 tag [2;1;-2;0] //main 
 
constraint:
 env  [y_main:{VV_int : int | []};
       tmp_main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       tmp_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_int : int | [(VV_int = (8 : int))]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = tmp_main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([tmp_main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_4]} 
 id 3 tag [2;1;-3;0] //main 
 
constraint:
 env  [y_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       __cil_tmp3_foo:{VV_int : int | []};
       __cil_tmp2_foo:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = y_foo);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([y_foo]))]} 
 rhs {VV_int : int | [k_0]} 
 id 4 tag [0;1;-1;1] //foo 
 
constraint:
 env  [y_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       __cil_tmp3_foo:{VV_int : int | []};
       __cil_tmp2_foo:{VV_int : int | [(VV_int = y_foo);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([y_foo]))]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [&& [(VV_int = (__cil_tmp2_foo + 4)) ; (__cil_tmp2_foo <= VV_int)];(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([__cil_tmp2_foo]))]} 
 rhs {VV_int : int | [k_1]} 
 id 5 tag [0;1;-2;1] //foo 
 
 
wf: env [y_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_1]} 
      
    

    wf: env [y_foo:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_0]} 
      
    

    wf: env [y_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_4]} 
      
    

    wf: env [y_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_3]} 
      
    

    wf: env [y_main:{VV_int : int | []};
             tmp_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_2]} 
      
     
//solution: k_4 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0))] 

//solution: k_3 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0))] 

//solution: k_2 := [(VV_int >= 4);(0 != VV_int);(VV_int = 8);(VV_int >= 8);(VV_int >= 0);(0 < VV_int);(0 <= VV_int);(VV_int >= 1);(((VV_int - 0) mod 8) = 0)] 

//solution: k_1 := [(0 != VV_int);(VV_int >= (BLOCK_BEGIN([VV_int]) + 4));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 4));(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 1))] 

//solution: k_0 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0))] 

solution: k_4 := [((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR7);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR11);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR19)] 

solution: k_3 := [((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR7);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR11);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR19)] 

solution: k_2 := [((((VV_int - 0) mod 8) = 0), SCALAR0);((VV_int >= 1), SCALAR4);((0 <= VV_int), GEZ);((0 < VV_int), GTZ);((VV_int >= 0), SCALAR6);((VV_int >= 8), SCALAR9);((VV_int = 8), SCALAR15);((0 != VV_int), NEZ0);((VV_int >= 4), SCALAR18)] 

solution: k_1 := [((VV_int >= (BLOCK_BEGIN([VV_int]) + 1)), SCALAR2);((((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0), SCALAR8);((VV_int = (BLOCK_BEGIN([VV_int]) + 4)), SCALAR10);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR11);((VV_int >= (BLOCK_BEGIN([VV_int]) + 4)), SCALAR13);((0 != VV_int), NEZ0)] 

solution: k_0 := [((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR7);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR11);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0), SCALAR19)] 

//QUALIFIERS 

qualif SCALAR9(VV_int:int):(VV_int >= 8)
      
qualif SCALAR8(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 4)) mod 8) = 0)
      
qualif SCALAR7(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR6(VV_int:int):(VV_int >= 0)
      
qualif SCALAR5(VV_int:int):(VV_int = 1)
      
qualif SCALAR4(VV_int:int):(VV_int >= 1)
      
qualif SCALAR3(VV_int:int):(((VV_int - 1) mod 8) = 0)
      
qualif SCALAR20(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 1)) mod 8) = 0)
      
qualif SCALAR2(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 1))
      
qualif SCALAR19(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 8) = 0)
      
qualif SCALAR18(VV_int:int):(VV_int >= 4)
      
qualif SCALAR17(VV_int:int):(((VV_int - 4) mod 8) = 0)
      
qualif SCALAR16(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 8))
      
qualif SCALAR15(VV_int:int):(VV_int = 8)
      
qualif SCALAR14(VV_int:int):(VV_int = 0)
      
qualif SCALAR13(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR12(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 8))
      
qualif SCALAR11(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR10(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR1(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 1))
      
qualif SCALAR0(VV_int:int):(((VV_int - 0) mod 8) = 0)
      
qualif SCALAR(VV_int:int):(VV_int = 4)
      
qualif NEZ0(VV_int:int):(0 != VV_int) 
qualif NEZ(VV_int:int):(0 = 1)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GEZ(VV_int:int):(0 <= VV_int)
      
qualif EQZ(VV_int:int):(0 = VV_int) 
 
