constraint:
 env  [tmp_main:{VV_int : int | []};
       __cil_tmp2_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [true]} 
 rhs {VV_int : int | [k_0]} 
 id 1 tag [2;1;-1;0] //main 
 
constraint:
 env  [tmp_main__SSA__blk_0_1:{VV_int : int | [true]};
       tmp_main:{VV_int : int | []};
       __cil_tmp2_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (tmp_main__SSA__blk_0_1 : int))]} 
 rhs {VV_int : int | [k_1]} 
 id 2 tag [2;1;-2;0] //main 
 
 
wf: env [tmp_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_1]} 
      
    

    wf: env [tmp_main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_0]} 
      
     
//solution: k_1 := [(0 = 1);(0 <= VV_int);(0 < VV_int);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = 0);(0 = VV_int);(0 != VV_int)] 

//solution: k_0 := [(0 = 1);(0 <= VV_int);(0 < VV_int);(VV_int >= 0);(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = 0);(0 = VV_int);(0 != VV_int)] 

solution: k_1 := [((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR2);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR1);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR0);((VV_int >= 0), SCALAR);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((0 = 1), NEZ)] 

solution: k_0 := [((0 != VV_int), NEZ0);((0 = VV_int), EQZ);((VV_int = 0), SCALAR2);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR1);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR0);((VV_int >= 0), SCALAR);((0 < VV_int), GTZ);((0 <= VV_int), GEZ);((0 = 1), NEZ)] 

//QUALIFIERS 

qualif SCALAR2(VV_int:int):(VV_int = 0)
      
qualif SCALAR1(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR0(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR(VV_int:int):(VV_int >= 0)
      
qualif NEZ0(VV_int:int):(0 != VV_int) 
qualif NEZ(VV_int:int):(0 = 1)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GEZ(VV_int:int):(0 <= VV_int)
      
qualif EQZ(VV_int:int):(0 = VV_int) 
 
