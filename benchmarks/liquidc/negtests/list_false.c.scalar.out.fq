constraint:
 env  [hd__lcc_heapify___main:{VV_int : int | []};
       __cil_tmp4_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]} 
 rhs {VV_int : int | [k_2]} 
 id 1 tag [3;2;-1;0] //main 
 
constraint:
 env  [hd__lcc_heapify___main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       hd__lcc_heapify___main:{VV_int : int | []};
       __cil_tmp4_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = hd__lcc_heapify___main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([hd__lcc_heapify___main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_3]} 
 id 2 tag [3;1;-1;0] //main 
 
constraint:
 env  [hd__lcc_heapify___main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
       hd__lcc_heapify___main:{VV_int : int | []};
       __cil_tmp4_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_int : int | [(VV_int = hd__lcc_heapify___main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([hd__lcc_heapify___main__SSA__blk_0_1]))]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = hd__lcc_heapify___main__SSA__blk_0_1);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([hd__lcc_heapify___main__SSA__blk_0_1]))]} 
 rhs {VV_int : int | [k_4]} 
 id 3 tag [3;1;-2;0] //main 
 
constraint:
 env  [v_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       hd_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       _e__insert:{VV_int : int | []};
       __cil_tmp4_insert:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = hd_insert);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([hd_insert]))]} 
 rhs {VV_int : int | [k_0]} 
 id 4 tag [1;1;-1;1] //insert 
 
constraint:
 env  [v_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       hd_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
       _e__insert__SSA__blk_0_1:{VV_int : int | [(VV_int = hd_insert);(BLOCK_BEGIN([VV_int]) = BLOCK_BEGIN([hd_insert]))]};
       _e__insert:{VV_int : int | []};
       __cil_tmp4_insert:{VV_int : int | []};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = (0 : int))]} 
 rhs {VV_int : int | [k_1]} 
 id 5 tag [1;1;-3;1] //insert 
 
 
wf: env [v_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             hd_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             _e__insert:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_1]} 
      
    

    wf: env [v_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             hd_insert:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0));true]};
             _e__insert:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_0]} 
      
    

    wf: env [hd__lcc_heapify___main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
             hd__lcc_heapify___main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_4]} 
      
    

    wf: env [hd__lcc_heapify___main__SSA__blk_0_1:{VV_int : int | [(VV_int = (BLOCK_BEGIN([VV_int]) + 0))]};
             hd__lcc_heapify___main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_3]} 
      
    

    wf: env [hd__lcc_heapify___main:{VV_int : int | []};
             UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_int : int | [k_2]} 
      
     
//solution: k_4 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0))] 

//solution: k_3 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0))] 

//solution: k_2 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0))] 

//solution: k_1 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(0 = VV_int);(VV_int = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0));(VV_int >= 0);(0 <= VV_int);(((VV_int - 0) mod 4) = 0)] 

//solution: k_0 := [(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0);(VV_int >= (BLOCK_BEGIN([VV_int]) + 0));(VV_int = (BLOCK_BEGIN([VV_int]) + 0))] 

solution: k_4 := [((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR2);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR4);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR8)] 

solution: k_3 := [((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR2);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR4);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR8)] 

solution: k_2 := [((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR2);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR4);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR8)] 

solution: k_1 := [((((VV_int - 0) mod 4) = 0), SCALAR0);((0 <= VV_int), GEZ);((VV_int >= 0), SCALAR1);((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR2);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR4);((VV_int = 0), SCALAR6);((0 = VV_int), EQZ);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR8)] 

solution: k_0 := [((VV_int = (BLOCK_BEGIN([VV_int]) + 0)), SCALAR2);((VV_int >= (BLOCK_BEGIN([VV_int]) + 0)), SCALAR4);((((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0), SCALAR8)] 

//QUALIFIERS 

qualif SCALAR8(VV_int:int):(((VV_int - (BLOCK_BEGIN([VV_int]) + 0)) mod 4) = 0)
      
qualif SCALAR7(VV_int:int):(VV_int >= 4)
      
qualif SCALAR6(VV_int:int):(VV_int = 0)
      
qualif SCALAR5(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR4(VV_int:int):(VV_int >= (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR3(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 4))
      
qualif SCALAR2(VV_int:int):(VV_int = (BLOCK_BEGIN([VV_int]) + 0))
      
qualif SCALAR1(VV_int:int):(VV_int >= 0)
      
qualif SCALAR0(VV_int:int):(((VV_int - 0) mod 4) = 0)
      
qualif SCALAR(VV_int:int):(VV_int = 4)
      
qualif NEZ0(VV_int:int):(0 != VV_int) 
qualif NEZ(VV_int:int):(0 = 1)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GEZ(VV_int:int):(0 <= VV_int)
      
qualif EQZ(VV_int:int):(0 = VV_int) 
 
