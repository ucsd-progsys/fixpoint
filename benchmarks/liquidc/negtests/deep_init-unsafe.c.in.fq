del_dep: [1;1;-11;0] => * 
constraint:
 env  [t__lcc_heapify__:{VV_ptr_A2 : ptr(A2) | []};
       __cil_tmp9_main:{VV_ptr_A2 : ptr(A2) | [k_9]};
       __cil_tmp8_main:{VV_int : int | []};
       __cil_tmp7_main:{VV_int : int | []};
       __cil_tmp6_main:{VV_int : int | []};
       __cil_tmp5_main:{VV_int : int | []};
       __cil_tmp4_main:{VV_int : int | []};
       __cil_tmp3_main:{VV_ptr_A2 : ptr(A2) | [&& [(VV_ptr_A2 = (__cil_tmp9_main + __cil_tmp2_main)) ; (__cil_tmp9_main <= VV_ptr_A2)];(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([__cil_tmp9_main]));(BLOCK_END([VV_ptr_A2]) = BLOCK_END([__cil_tmp9_main]));(UNCHECKED([VV_ptr_A2]) = UNCHECKED([__cil_tmp9_main]))]};
       __cil_tmp2_main:{VV_int : int | [(VV_int = (__cil_tmp1_main + 8))]};
       __cil_tmp1_main:{VV_int : int | [(VV_int = (0 * 12))]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_ptr_A2 : ptr(A2) | [(VV_ptr_A2 = __cil_tmp3_main)]} 
 rhs {VV_ptr_A2 : ptr(A2) | [|| [(UNCHECKED([VV_ptr_A2]) = 1);&& [(VV_ptr_A2 != 0) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; ((VV_ptr_A2 + 0) < BLOCK_END([VV_ptr_A2]))]]]} 
 id 1 tag [1;1;-5;0] //main 
 
constraint:
 env  [t__lcc_heapify__:{VV_ptr_A2 : ptr(A2) | []};
       lqn#5:{VV_int : int | [k_13[A2#Ix#8:=lqn#5][A2#Ix#4:=lqn#4][A2#Ix#0:=lqn#3]]};
       lqn#4:{VV_int : int | []};
       lqn#3:{VV_int : int | []};
       __cil_tmp9_main:{VV_ptr_A2 : ptr(A2) | []};
       __cil_tmp8_main:{VV_int : int | [(VV_int = lqn#5)]};
       __cil_tmp7_main:{VV_int : int | [(VV_int = (__cil_tmp6_main : int))]};
       __cil_tmp6_main:{VV_int : int | [(VV_int = ((__cil_tmp5_main = 1) ? 1 : 0))]};
       __cil_tmp5_main:{VV_int : int | [(VV_int = (__cil_tmp4_main : int))]};
       __cil_tmp4_main:{VV_int : int | [(VV_int = __cil_tmp8_main)]};
       __cil_tmp3_main:{VV_ptr_A2 : ptr(A2) | [&& [(VV_ptr_A2 = (__cil_tmp9_main + __cil_tmp2_main)) ; (__cil_tmp9_main <= VV_ptr_A2)];(BLOCK_BEGIN([VV_ptr_A2]) = BLOCK_BEGIN([__cil_tmp9_main]));(BLOCK_END([VV_ptr_A2]) = BLOCK_END([__cil_tmp9_main]));(UNCHECKED([VV_ptr_A2]) = UNCHECKED([__cil_tmp9_main]))]};
       __cil_tmp2_main:{VV_int : int | [(VV_int = (__cil_tmp1_main + 8))]};
       __cil_tmp1_main:{VV_int : int | [(VV_int = (0 * 12))]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = __cil_tmp7_main)]} 
 rhs {VV_int : int | [(VV_int != 0)]} 
 id 2 tag [1;1;-10;0] //main 
 
constraint:
 env  [UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_ptr_A2 : ptr(A2) | [&& [(VV_ptr_A2 > 0) ; (BLOCK_BEGIN([VV_ptr_A2]) = VV_ptr_A2) ; (BLOCK_END([VV_ptr_A2]) = (VV_ptr_A2 + 12))]]} 
 rhs {VV_ptr_A2 : ptr(A2) | [k_9]} 
 id 3 tag [-2;-1;-1;-1] //global 
 
constraint:
 env  [lqn#2:{VV_int : int | [(VV_int = 0)]};
       lqn#1:{VV_int : int | [(VV_int = 0)]};
       lqn#0:{VV_int : int | [(VV_int = 0)]};
       UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
       SKOLEM:{VV_func : func(0, [int ; int]) | []};
       DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
       C8#Ix#8:{VV_int : int | [(VV_int = 2)]};
       C8#Ix#4:{VV_int : int | [(VV_int = 1)]};
       C8#Ix#0:{VV_int : int | [(VV_int = 0)]};
       BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
       BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
 grd true 
 lhs {VV_int : int | [(VV_int = C8#Ix#8)]} 
 rhs {VV_int : int | [k_13[A2#Ix#8:=C8#Ix#8][A2#Ix#4:=C8#Ix#4][A2#Ix#0:=C8#Ix#0]]} 
 id 6 tag [-2;-1;-1;-1] //global 
 
 
wf: env [UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []}] 
     reft {VV_ptr_A2 : ptr(A2) | [k_9]} 
      
    

    wf: env [UNCHECKED:{VV_func : func(1, [@(0) ; int]) | []};
             SKOLEM:{VV_func : func(0, [int ; int]) | []};
             DEREF:{VV_func : func(1, [@(0) ; @(1)]) | []};
             BLOCK_END:{VV_func : func(1, [@(0) ; @(0)]) | []};
             BLOCK_BEGIN:{VV_func : func(1, [@(0) ; @(0)]) | []};
             A2#Ix#8:{VV_int : int | [k_13]};
             A2#Ix#4:{VV_int : int | [k_12]};
             A2#Ix#0:{VV_int : int | [k_11]}] 
     reft {VV_int : int | [k_13]} 
      
     
//solution: k_9 := [((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]);((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4));(VV_ptr_A2 < BLOCK_END([VV_ptr_A2]));(0 < VV_ptr_A2);((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])));(0 <= VV_ptr_A2);(VV_ptr_A2 = 0);(VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]));(BLOCK_END([VV_ptr_A2]) = (BLOCK_BEGIN([VV_ptr_A2]) + 12));(BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2);(UNCHECKED([VV_ptr_A2]) = 1)] 

//solution: k_13 := [(VV_int = 2);(0 <= VV_int);(1 = 0);(VV_int < A2#Ix#8);(VV_int < A2#Ix#4);(VV_int < A2#Ix#0);(0 < VV_int);(VV_int = 1);(VV_int <= A2#Ix#8);(VV_int <= A2#Ix#4);(VV_int <= A2#Ix#0);(VV_int = 0);(VV_int > A2#Ix#8);(VV_int > A2#Ix#4);(VV_int > A2#Ix#0);(VV_int >= A2#Ix#8);(VV_int >= A2#Ix#4);(VV_int >= A2#Ix#0)] 

//solution: k_12 := [(VV_int = 2);(0 <= VV_int);(1 = 0);(VV_int < A2#Ix#8);(VV_int < A2#Ix#4);(VV_int < A2#Ix#0);(0 < VV_int);(VV_int = 1);(VV_int <= A2#Ix#8);(VV_int <= A2#Ix#4);(VV_int <= A2#Ix#0);(VV_int = 0);(VV_int > A2#Ix#8);(VV_int > A2#Ix#4);(VV_int > A2#Ix#0);(VV_int >= A2#Ix#8);(VV_int >= A2#Ix#4);(VV_int >= A2#Ix#0)] 

//solution: k_11 := [(VV_int = 2);(0 <= VV_int);(1 = 0);(VV_int < A2#Ix#8);(VV_int < A2#Ix#4);(VV_int < A2#Ix#0);(0 < VV_int);(VV_int = 1);(VV_int <= A2#Ix#8);(VV_int <= A2#Ix#4);(VV_int <= A2#Ix#0);(VV_int = 0);(VV_int > A2#Ix#8);(VV_int > A2#Ix#4);(VV_int > A2#Ix#0);(VV_int >= A2#Ix#8);(VV_int >= A2#Ix#4);(VV_int >= A2#Ix#0)] 

//solution: k_10 := [(VV_int = 2);(0 <= VV_int);(1 = 0);(0 < VV_int);(VV_int = 1);(VV_int = 0)] 

solution: k_9 := [((UNCHECKED([VV_ptr_A2]) = 1), UCH[VV_ptr_0:=VV_ptr_A2]);((BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2), LB[VV_ptr_0:=VV_ptr_A2]);((BLOCK_END([VV_ptr_A2]) = (BLOCK_BEGIN([VV_ptr_A2]) + 12)), structSize[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2])), ISBS[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 = 0), EQZ0[VV_ptr_0:=VV_ptr_A2]);((0 <= VV_ptr_A2), GTZP0[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => (VV_ptr_A2 = BLOCK_BEGIN([VV_ptr_A2]))), NULLorBEGIN[VV_ptr_0:=VV_ptr_A2]);((0 < VV_ptr_A2), GTZP[VV_ptr_0:=VV_ptr_A2]);((VV_ptr_A2 < BLOCK_END([VV_ptr_A2])), UB[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => ((BLOCK_END([VV_ptr_A2]) - VV_ptr_A2) >= 4)), WORDSIZE[VV_ptr_0:=VV_ptr_A2]);(((VV_ptr_A2 != 0) => && [(0 < VV_ptr_A2) ; (BLOCK_BEGIN([VV_ptr_A2]) <= VV_ptr_A2) ; (VV_ptr_A2 < BLOCK_END([VV_ptr_A2]))]), NULLorVALID[VV_ptr_0:=VV_ptr_A2])] 

solution: k_13 := [((VV_int >= A2#Ix#0), GEQ[~A0:=A2#Ix#0]);((VV_int >= A2#Ix#4), GEQ[~A0:=A2#Ix#4]);((VV_int >= A2#Ix#8), GEQ[~A0:=A2#Ix#8]);((VV_int > A2#Ix#0), GT[~A0:=A2#Ix#0]);((VV_int > A2#Ix#4), GT[~A0:=A2#Ix#4]);((VV_int > A2#Ix#8), GT[~A0:=A2#Ix#8]);((VV_int = 0), EQZ);((VV_int <= A2#Ix#0), LEQ[~A0:=A2#Ix#0]);((VV_int <= A2#Ix#4), LEQ[~A0:=A2#Ix#4]);((VV_int <= A2#Ix#8), LEQ[~A0:=A2#Ix#8]);((VV_int = 1), isOne);((0 < VV_int), GTZ);((VV_int < A2#Ix#0), LT[~A0:=A2#Ix#0]);((VV_int < A2#Ix#4), LT[~A0:=A2#Ix#4]);((VV_int < A2#Ix#8), LT[~A0:=A2#Ix#8]);((1 = 0), FALSE);((0 <= VV_int), GEZ);((VV_int = 2), isTwo)] 

solution: k_12 := [((VV_int >= A2#Ix#0), GEQ[~A0:=A2#Ix#0]);((VV_int >= A2#Ix#4), GEQ[~A0:=A2#Ix#4]);((VV_int >= A2#Ix#8), GEQ[~A0:=A2#Ix#8]);((VV_int > A2#Ix#0), GT[~A0:=A2#Ix#0]);((VV_int > A2#Ix#4), GT[~A0:=A2#Ix#4]);((VV_int > A2#Ix#8), GT[~A0:=A2#Ix#8]);((VV_int = 0), EQZ);((VV_int <= A2#Ix#0), LEQ[~A0:=A2#Ix#0]);((VV_int <= A2#Ix#4), LEQ[~A0:=A2#Ix#4]);((VV_int <= A2#Ix#8), LEQ[~A0:=A2#Ix#8]);((VV_int = 1), isOne);((0 < VV_int), GTZ);((VV_int < A2#Ix#0), LT[~A0:=A2#Ix#0]);((VV_int < A2#Ix#4), LT[~A0:=A2#Ix#4]);((VV_int < A2#Ix#8), LT[~A0:=A2#Ix#8]);((1 = 0), FALSE);((0 <= VV_int), GEZ);((VV_int = 2), isTwo)] 

solution: k_11 := [((VV_int >= A2#Ix#0), GEQ[~A0:=A2#Ix#0]);((VV_int >= A2#Ix#4), GEQ[~A0:=A2#Ix#4]);((VV_int >= A2#Ix#8), GEQ[~A0:=A2#Ix#8]);((VV_int > A2#Ix#0), GT[~A0:=A2#Ix#0]);((VV_int > A2#Ix#4), GT[~A0:=A2#Ix#4]);((VV_int > A2#Ix#8), GT[~A0:=A2#Ix#8]);((VV_int = 0), EQZ);((VV_int <= A2#Ix#0), LEQ[~A0:=A2#Ix#0]);((VV_int <= A2#Ix#4), LEQ[~A0:=A2#Ix#4]);((VV_int <= A2#Ix#8), LEQ[~A0:=A2#Ix#8]);((VV_int = 1), isOne);((0 < VV_int), GTZ);((VV_int < A2#Ix#0), LT[~A0:=A2#Ix#0]);((VV_int < A2#Ix#4), LT[~A0:=A2#Ix#4]);((VV_int < A2#Ix#8), LT[~A0:=A2#Ix#8]);((1 = 0), FALSE);((0 <= VV_int), GEZ);((VV_int = 2), isTwo)] 

solution: k_10 := [((VV_int = 0), EQZ);((VV_int = 1), isOne);((0 < VV_int), GTZ);((1 = 0), FALSE);((0 <= VV_int), GEZ);((VV_int = 2), isTwo)] 

//QUALIFIERS 

qualif structSize(VV_ptr_0:ptr(0)):(BLOCK_END([VV_ptr_0]) = (BLOCK_BEGIN([VV_ptr_0]) + 12))
      
qualif isTwo(VV_int:int):(VV_int = 2)
      
qualif isOne(VV_int:int):(VV_int = 1)
      
qualif WORDSIZE(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => ((BLOCK_END([VV_ptr_0]) - VV_ptr_0) >= 4))
      
qualif UCH(VV_ptr_0:ptr(0)):(UNCHECKED([VV_ptr_0]) = 1)
      
qualif UB(VV_ptr_0:ptr(0)):(VV_ptr_0 < BLOCK_END([VV_ptr_0]))
      
qualif NULLorVALID(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => && [(0 < VV_ptr_0) ; (BLOCK_BEGIN([VV_ptr_0]) <= VV_ptr_0) ; (VV_ptr_0 < BLOCK_END([VV_ptr_0]))])
      
qualif NULLorBEGIN(VV_ptr_0:ptr(0)):((VV_ptr_0 != 0) => (VV_ptr_0 = BLOCK_BEGIN([VV_ptr_0])))
      
qualif LT(VV_int:int):(VV_int < ~A0)
      
qualif LEQ(VV_int:int):(VV_int <= ~A0)
      
qualif LB(VV_ptr_0:ptr(0)):(BLOCK_BEGIN([VV_ptr_0]) <= VV_ptr_0)
      
qualif ISBS(VV_ptr_0:ptr(0)):(VV_ptr_0 = BLOCK_BEGIN([VV_ptr_0]))
      
qualif GTZP0(VV_ptr_0:ptr(0)):(0 <= VV_ptr_0)
      
qualif GTZP(VV_ptr_0:ptr(0)):(0 < VV_ptr_0)
      
qualif GTZ(VV_int:int):(0 < VV_int)
      
qualif GT(VV_int:int):(VV_int > ~A0)
      
qualif GEZ(VV_int:int):(0 <= VV_int)
      
qualif GEQ(VV_int:int):(VV_int >= ~A0)
      
qualif FALSE(VV_int:int):(1 = 0)
      
qualif EQZ0(VV_ptr_0:ptr(0)):(VV_ptr_0 = 0)
      
qualif EQZ(VV_int:int):(VV_int = 0) 
 
